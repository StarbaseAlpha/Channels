"use strict";function ChannelsAPI(serverPath){let token=null;const request=req=>new Promise((resolve,reject)=>{fetch(serverPath,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({token:token||req.token||"",method:req.method||"",path:req.path||"",data:req.data||{}})}).then(async response=>{let result=await response.json();return response.status>399?reject(result):resolve(result)})}),setToken=newToken=>(token=newToken,!0),Channel=requestPath=>{let parsedPath=(requestPath=>{let reqPath,parts=(reqPath=requestPath?requestPath.toString():"/").toString().replace(/\/\//g,"/").replace(/^\//,"").replace(/\/$/,"").replace(/\/\//g,"/").split("/"),channel="/"+parts.slice(0,-1).join("/"),key=parts.slice(-1)[0],slash="";return"/"!==channel&&(slash="/"),{path:channel+slash+key,channel:channel,key:key,slash:slash}})(requestPath).path;return{channel:()=>parsedPath,setToken:token=>{setToken(token)},request:req=>request({method:req.method,path:req.path||parsedPath,data:req.data||null}),put:data=>((path,data)=>request({method:"put",path:path,data:data}))(parsedPath,data),get:query=>((path,query)=>request({method:"get",path:path,data:query}))(parsedPath,query),del:()=>(path=>request({method:"del",path:path}))(parsedPath),list:query=>((path,data)=>request({method:"list",path:path,data:data}))(parsedPath,query),path:path=>{path||(path="/");let slash="";return"/"!==parsedPath&&(slash="/"),Channel(parsedPath+slash+path)}}};return Channel("/")}