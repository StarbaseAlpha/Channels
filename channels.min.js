"use strict";function Channels(db){let onEvent;const eventHandler=e=>{onEvent&&"function"==typeof onEvent&&onEvent(e)},Projection=(doc,projection)=>{let result={};for(var k in doc)projection[k]&&("object"==typeof projection[k]?result[k]=Projection(doc[k],projection[k]):result[k]=doc[k]);return result},Filter=(doc,filter)=>{let filtered=!1;if("string"==typeof filter&&"string"==typeof doc){var found=((y,data)=>{y=new RegExp(y.split(" ").map(val=>"(?=.*"+val+")").join(""),"i");return data.match(y)})(filter,doc);return!doc||!found}for(var k in filter){if(!doc[k]){filtered=!0;break}if(typeof filter[k]!=typeof doc[k]){filtered=!0;break}if(typeof filter[k]==typeof doc[k]&&(filtered=Filter(doc[k],filter[k]),filtered))break}return filtered},ParsePath=key=>{let reqPath;reqPath=key?key.toString():"/";let parts=reqPath.toString().replace(/\/\//g,"/").replace(/^\//,"").replace(/\/$/,"").replace(/\/\//g,"/").split("/");var channel="/"+parts.slice(0,-1).join("/"),key=parts.slice(-1)[0];let slash="/"!=channel?"/":"";return{path:channel+slash+key,channel:channel,key:key,slash:slash,dsPath:"!"+channel+"!"+key}},Channel=(db,requestPath)=>{let parsedPath=ParsePath(requestPath).path;return{channel:()=>parsedPath,put:data=>Put(db,parsedPath,data),get:query=>Get(db,parsedPath,query),del:()=>((db,requestPath)=>new Promise((resolve,reject)=>{let{path,channel,key,slash}=ParsePath(requestPath);db.list({gt:"!"+channel+slash+key+"!",lt:"!"+channel+slash+key+"/￿"+"/"}).then(results=>{results.unshift("!"+channel+"!"+key);db.del(results).then(deleted=>{let paths=deleted.keys.map(val=>{return val.replace(/^\!/,"").replace(/\!/g,"/").replace(/\/\//g,"/").replace(/\/\//g,"/")});let e={event:deleted.event,paths:paths,timestamp:deleted.timestamp};eventHandler(e);resolve(e)})})}))(db,parsedPath),list:query=>List(db,parsedPath,query),parse:(path=null)=>ParsePath((path||parsedPath).toString()),path:path=>{path=path||"/";let slash="";return"/"!==parsedPath&&(slash="/"),Channel(db,parsedPath+slash+path)}}},Put=(db,requestPath,data)=>new Promise((resolve,reject)=>{if(!data)return reject({code:400,message:"Data is required."});if(requestPath.match(/\!/))return reject({code:400,message:"Invalid Path. The exclamation point (!) is a reserved character."});let{channel,key,slash}=ParsePath(requestPath);db.put("!"+channel+"!"+key,data).then(result=>{let response={event:result.event,path:channel+slash+(key||""),channel:channel,key:key||"",timestamp:result.timestamp};if("/"===channel&&(!key||""===key))return eventHandler(response),resolve(response);Get(db,channel).then(found=>{eventHandler(response),resolve(response)}).catch(err=>{Put(db,channel,{}).then(written=>{eventHandler(response),resolve(response)}).catch(reject)})}).catch(reject)}),Get=(db,requestPath,query)=>new Promise((resolve,reject)=>{let{channel,key,slash}=ParsePath(requestPath);db.get("!"+channel+"!"+key).then(response=>{if(!response.value)return reject({code:404,message:"Not Found"});let result={path:channel+slash+key,channel:channel,key:key,data:response.value};query&&query.projection&&"object"==typeof query.projection&&(result=Projection(result,query.projection)),query&&query.children?List(db,result.path,query.children).then(children=>{children&&children.data?result.children=children.data:result.children=[],resolve(result)}):resolve(result)}).catch(reject)}),List=(db,requestPath="/",query={})=>new Promise((resolve,reject)=>{query&&"object"==typeof query||(query={});let channel=requestPath.toString(),slash="";"/"!==channel&&(slash="/",channel="/"+channel.replace(/^\//,"").replace(/\/$/,""));var gt="!"+channel+"!"+(query.gt||"");let lt="!"+channel+"!"+(query.lt||"￿");!query.deep&&1||(lt="!"+channel+slash+"￿"),db.list({gt:gt,lt:lt,reverse:query.reverse||!1,values:query.values||!1,limit:query.limit||null}).then(data=>{let last=null;data=data.map(val=>{var channel=(val="object"!=typeof val?{key:val}:val).key.replace(/^\!/,"").split("!")[0],key=val.key.replace(/^\!/,"").split("!")[1]||"/";let slash="";"/"!==channel&&(slash="/");let result={path:channel+slash+key,channel:channel,key:key};return last=result.key,val.value&&(result.data=val.value),query.projection&&"object"==typeof query.projection&&(result=Projection(result,query.projection)),result}).filter(val=>!(query.values&&val.data&&query.filter&&"object"==typeof query.filter)||!Filter(val.data,query.filter));let cursor=null;last&&(cursor={},query.limit&&(cursor.limit=parseInt(query.limit)),query.reverse?(cursor.reverse=!0,cursor.lt=last):(cursor.reverse=!1,cursor.gt=last),query.values&&(cursor.values=!0),query.filter&&(cursor.filter=query.filter),query.projection&&(cursor.projection=query.projection)),resolve({data:data,cursor:cursor})})});let channel=Channel(db,"/");return channel.onEvent=cb=>{onEvent=cb},channel.datastore=db,channel}"undefined"!=typeof module&&module&&module.exports&&(module.exports=Channels);