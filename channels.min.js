"use strict";function Channels(db){let onEvent;const eventHandler=e=>{onEvent&&"function"==typeof onEvent&&onEvent(e)},ParsePath=requestPath=>{let reqPath,parts=(reqPath=requestPath?requestPath.toString():"/").toString().replace(/\/\//g,"/").replace(/^\//,"").replace(/\/$/,"").replace(/\/\//g,"/").split("/"),channel="/"+parts.slice(0,-1).join("/"),key=parts.slice(-1)[0],slash="";return"/"!==channel&&(slash="/"),{path:channel+slash+key,channel:channel,key:key,slash:slash}},Channel=(db,requestPath)=>{let parsedPath=ParsePath(requestPath).path;return{channel:()=>parsedPath,put:data=>Put(db,parsedPath,data),get:()=>Get(db,parsedPath),del:()=>Del(db,parsedPath),list:query=>List(db,parsedPath,query),path:path=>{path||(path="/");let slash="";return"/"!==parsedPath&&(slash="/"),Channel(db,parsedPath+slash+path)}}},Put=(db,requestPath,data)=>new Promise((resolve,reject)=>{if(!data)return reject({code:400,message:"Data is required."});if(requestPath.match(/\!/))return reject({code:400,message:"Invalid Path. The exclamation point (!) is a reserved character."});let{path:path,channel:channel,key:key,slash:slash}=ParsePath(requestPath);db.put("!"+channel+"!"+key,data).then(result=>{let response={event:result.event,path:channel+slash+(key||""),channel:channel,key:key||"",timestamp:result.timestamp};if("/"===channel&&(!key||""===key))return eventHandler(response),resolve(response);Get(db,channel).then(found=>{eventHandler(response),resolve(response)}).catch(err=>{Put(db,channel,{}).then(written=>{eventHandler(response),resolve(response)}).catch(reject)})}).catch(reject)}),Get=(db,requestPath)=>new Promise((resolve,reject)=>{let{path:path,channel:channel,key:key,slash:slash}=ParsePath(requestPath);db.get("!"+channel+"!"+key).then(result=>{if(!result.value)return reject({code:404,message:"Not Found"});resolve({path:channel+slash+key,channel:channel,key:key,data:result.value})}).catch(reject)}),Del=(db,requestPath)=>new Promise((resolve,reject)=>{let{path:path,channel:channel,key:key,slash:slash}=ParsePath(requestPath);db.list({gt:"!"+channel+slash+key+"!",lt:"!"+channel+slash+key+"￿/"}).then(results=>{results.unshift("!"+channel+"!"+key),db.del(results).then(deleted=>{let paths=deleted.keys.map(val=>val.replace(/^\!/,"").replace(/\!/g,"/").replace(/\/\//g,"/").replace(/\/\//g,"/")),e={event:deleted.event,paths:paths,timestamp:deleted.timestamp};eventHandler(e),resolve(e)})})}),List=(db,requestPath="/",query={})=>new Promise((resolve,reject)=>{"object"!=typeof query&&(query={});let channel=requestPath.toString(),slash="";"/"!==channel&&(slash="/",channel="/"+channel.replace(/^\//,"").replace(/\/$/,""));let gt="!"+channel+"!"+(query.gt||""),lt="!"+channel+"!"+(query.lt||"￿");(query.deep||!1)&&(lt="!"+channel+slash+"￿"),db.list({gt:gt,lt:lt,reverse:query.reverse||!1,values:query.values||!1,limit:query.limit||null}).then(results=>{let data=results.map(val=>{"object"!=typeof val&&(val={key:val});let channel=val.key.replace(/^\!/,"").split("!")[0],key=val.key.replace(/^\!/,"").split("!")[1]||"/",slash="";"/"!==channel&&(slash="/");let result={path:channel+slash+key,channel:channel,key:key};return val.value&&(result.data=val.value),result});resolve({data:data})})});let channel=Channel(db,"/");return channel.onEvent=(cb=>{onEvent=cb}),channel}"undefined"!=typeof module&&module&&module.exports&&(module.exports=Channels);